# Python to Linux Web App on Azure

# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  - group: personal-secrets  
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: pythonVersion
    value: '3.10'
  - name: githubUser
    value: 'codebyhans'
  - name: githubEmail
    value: 'hansotto.kristiansen@gmail.com'
  - name: githubRepo
    value: 'costocks-backend'


stages:
  - stage: MirrorToGitHub
    displayName: 'Mirror Azure ‚Üí GitHub'
    jobs:
      - job: MirrorJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - script: |
              set -eux

              echo "üîß Configuring Git identity‚Ä¶"
              git config --global user.name  "$(githubUser)"
              git config --global user.email "$(githubEmail)"

              echo "üîê Building Azure DevOps repo URL‚Ä¶"
              # Strip "https://" from the collection URI so we can prepend the token cleanly
              COLL_NO_PROTO="${SYSTEM_TEAMFOUNDATIONCOLLECTIONURI#https://}"
              AZ_URL="https://${SYSTEM_ACCESS_TOKEN}@${COLL_NO_PROTO}${SYSTEM_TEAMPROJECT}/_git/${BUILD_REPOSITORY_NAME}"

              echo "üì• Cloning bare‚Äêmirror from Azure DevOps:"
              git clone --mirror "$AZ_URL" repo-mirror
              cd repo-mirror

              echo "üìé Adding GitHub remote‚Ä¶"
              git remote add github \
                "https://$(GITHUB_TOKEN)@github.com/$(githubUser)/$(githubRepo).git"

              echo "üì§ Pushing ALL branches & tags to GitHub‚Ä¶"
              git push --mirror github

              echo "‚úÖ Mirror complete!"
            displayName: 'Mirror Azure‚ÜíGitHub (bare)'
            env:
              SYSTEM_ACCESS_TOKEN: $(System.AccessToken)
              GITHUB_TOKEN:      $(GITHUB_TOKEN)
  
  - stage: Build
    displayName: 'Build Python App'
    jobs:
      - job: BuildJob
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python $(pythonVersion)'
          
          - script: |
              pip install pdm
            displayName: 'Install PDM'
          
          - script: |
              pdm install
            displayName: "Install dependencies"

  - stage: DockerBuildPush
    displayName: 'Buld and Push Docker Image'
    jobs:
    - job: DockerPushJob
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'costocksregistry'
          repository: 'backenda'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: 'latest'

