# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'f47c4d2f-64cb-450d-be3f-4dbef447e59b'

  # Web app name
  webAppName: 'costocks'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: 'costocks'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.10
  pythonVersion: '3.10'

stages:
#- stage: Build
#  displayName: Build stage
#  jobs:
#  - job: BuildJob
#    pool:
#      vmImage: $(vmImageName)
#    steps:
#    - task: UsePythonVersion@0
#      inputs:
#        versionSpec: '$(pythonVersion)'
#      displayName: 'Use Python $(pythonVersion)'
#    - task: PipAuthenticate@1
#      displayName: 'Pip Authenticate'
#      inputs:
#        # Provide list of feed names which you want to authenticate.
#        # Project scoped feeds must include the project name in addition to the feed name.
#        artifactFeeds: 'COSTOCKS/artifacts-costocks'
#        # Setting this variable to "true" will force pip to get distributions from official python registry first and fallback to feeds mentioned above if distributions are not found there.
#        onlyAddExtraIndex: true
#    - script: |
#        curl -sSL https://pdm-project.org/install-pdm.py | python3 -
#      displayName: 'Install pdm'
#    - script: |
#        pip install keyring
#        pip install artifacts-keyring
#      displayName: 'Install keyring'
#    - script: |
#        pdm install
#      workingDirectory: $(projectRoot)
#      displayName: "Install requirements"
#    - task: ArchiveFiles@2
#      displayName: 'Archive files'
#      inputs:
#        rootFolderOrFile: '$(projectRoot)'
#        includeRootFolder: false
#        archiveType: zip
#        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#        replaceExistingArchive: true
#
#    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#      displayName: 'Upload package'
#      artifact: backend-a
      
- stage: DockerBuild
  displayName: 'Build dockerimage'
  condition: succeeded()
  jobs:
  - job: DockerJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        repository: backend-a
        command: build
        Dockerfile: Dockerfile
        
- stage: DockerPush
  displayName: 'Push dockerimage'
  condition: succeeded()
  dependsOn: DockerBuild
  jobs:
  - job: DockerJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Push image to registry
      condition: succeeded()
      inputs:
        command: push
        repository: backend-a
        containerRegistry: 'costocksregistry'  
        tags: |
          $(latest)  # Optionally, you can use tags to version your images, here it uses Build ID as a tag
